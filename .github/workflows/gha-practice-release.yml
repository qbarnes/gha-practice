name: gha-practice-release

on:
  push:
    branches:
      - master
    paths:
      - 'version.h'
#    tags:
#      - "v*"

  workflow_dispatch:


env:
  package: gha-practice


#  label:
#    types:
#      - [created, edited]


#permissions:
#add this later


jobs:
#  build:
#    name: Build All
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v3
#      - uses: ./.github/workflows/gha-practice-build.yml

  build_all:
    runs-on: ubuntu-latest
    outputs:
      build_version: ${{ steps.build_version.outputs.build_version }}
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      - name: Prep cross-compiler and add to PATH
        run: |
          wget -nv https://github.com/andrewwutw/build-djgpp/releases/download/v3.1/djgpp-linux64-gcc1020.tar.bz2
          mkdir djgpp
          tar -xf djgpp-linux64-gcc1020.tar.bz2 -C djgpp
          echo "$PWD/djgpp/bin" >> $GITHUB_PATH

      - name: Read version and save in "build_version" environment variable
        run: echo "build_version=$(make show_version)" >> $GITHUB_ENV

      - id: build_version
        run: echo "build_version=${build_version}" >> $GITHUB_OUTPUT

      - name: Add source tarball to "release_files"
        run: |
          echo "release_files<<EOF" >> $GITHUB_ENV
          echo -e "${release_files}${release_files:+\n}${package}-${build_version}-src.tar.gz" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Build Linux
        run:  make

      - name: Add linux tarball to "release_files"
        run: |
          echo "release_files<<EOF" >> $GITHUB_ENV
          echo -e "${release_files}${release_files:+\n}${package}-${build_version}-linux-x86_64.tar.gz" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Build MS-DOS
        run:  make TARGET_OS=MSDOS

      - name: Add MS-DOS tarball to "release_files"
        run: |
          echo "release_files<<EOF" >> $GITHUB_ENV
          echo -e "${release_files}${release_files:+\n}${package}-${build_version}-msdos.tar.gz" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Add "release_notes" file to "release_files"
        run: |
          echo "release_files<<EOF" >> $GITHUB_ENV
          echo -e "${release_files}${release_files:+\n}release_notes" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Build full release
        run:  make fullrelease

      - name: Show build files
        run: ls -l

      - name: Show "release_files"
        run: |
          echo "release_files=${release_files}"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.package }}-build-artifacts-${{ env.build_version }}
          path: |
            ${{ env.release_files }}
          if-no-files-found: error
          retention-days: 2

  release:
    name: Make Release
    needs: build_all
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Show version
        run: |
          echo needs.build_all.outputs.build_version=${{ needs.build_all.outputs.build_version }}

      - name: Create tag
        uses: rickstaa/action-create-tag@v1
        with:
          tag: "v${{ needs.build_all.outputs.build_version }}"

      - name: Make artifacts directory
        run: mkdir github_artifacts

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          path: github_artifacts
          name: ${{ env.package }}-build-artifacts-${{ needs.build_all.outputs.build_version }}

      - name: Move release notes
        run: mv github_artifacts/release_notes .

      - name: Check for files
        run: ls -l . github_artifacts

#      - uses: "marvinpinto/action-automatic-releases@latest"
#        with:
#          repo_token: "${{ secrets.GITHUB_TOKEN }}"
#          prerelease: false
#          files: |
#            github_artifacts/*

      - uses: ncipollo/release-action@v1
        with:
          artifactErrorsFailBuild: true
          makeLatest: true
          name: "Release ${{ needs.build_all.outputs.build_version }}"
          tag: "v${{ needs.build_all.outputs.build_version }}"
          bodyFile: release_notes
          artifacts: github_artifacts/*
